{"version":3,"sources":["Icons.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Icons","className","rel","href","target","icon","faLinkedin","size","faGithub","faInstagram","faTwitter","faFacebook","faYoutube","faTwitch","faSteam","faEnvelope","React","Component","App","exact","path","render","window","location","withRouter","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAmDeA,E,4JAnCb,WACE,OACE,sBAAKC,UAAU,QAAf,UACE,mBAAGC,IAAI,sBAAsBC,KAAK,4CAA4CC,OAAO,SAArF,SACE,cAAC,IAAD,CAAiBC,KAAMC,IAAYC,KAAM,KAAMN,UAAW,oBAE5D,mBAAGC,IAAI,sBAAsBC,KAAK,6BAA6BC,OAAO,SAAtE,SACE,cAAC,IAAD,CAAiBC,KAAMG,IAAUD,KAAM,KAAMN,UAAW,kBAE1D,mBAAGC,IAAI,sBAAsBC,KAAK,oCAAoCC,OAAO,SAA7E,SACE,cAAC,IAAD,CAAiBC,KAAMI,IAAaF,KAAM,KAAMN,UAAW,qBAE7D,mBAAGC,IAAI,sBAAsBC,KAAK,8BAA8BC,OAAO,SAAvE,SACE,cAAC,IAAD,CAAiBC,KAAMK,IAAWH,KAAM,KAAMN,UAAW,mBAE3D,mBAAGC,IAAI,sBAAsBC,KAAK,mCAAmCC,OAAO,SAA5E,SACE,cAAC,IAAD,CAAiBC,KAAMM,IAAYJ,KAAM,KAAMN,UAAW,oBAE5D,mBAAGC,IAAI,sBAAsBC,KAAK,iCAAiCC,OAAO,SAA1E,SACE,cAAC,IAAD,CAAiBC,KAAMO,IAAWL,KAAM,KAAMN,UAAW,mBAE3D,mBAAGC,IAAI,sBAAsBC,KAAK,gCAAgCC,OAAO,SAAzE,SACE,cAAC,IAAD,CAAiBC,KAAMQ,IAAUN,KAAM,KAAMN,UAAW,kBAE1D,mBAAGC,IAAI,sBAAsBC,KAAK,wCAAwCC,OAAO,SAAjF,SACE,cAAC,IAAD,CAAiBC,KAAMS,IAASP,KAAM,KAAMN,UAAW,iBAEzD,mBAAGC,IAAI,sBAAsBC,KAAK,6BAA6BC,OAAO,SAAtE,SACE,cAAC,IAAD,CAAiBC,KAAMU,IAAYR,KAAM,KAAMN,UAAW,2B,GA7BhDe,IAAMC,W,OCVpBC,E,4JACJ,WACE,OACE,qCACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,OAAQ,kBAAOC,OAAOC,SAASpB,KAAO,kCAChE,sBAAKF,UAAU,MAAf,UACE,oBAAIA,UAAU,WAAd,0BACA,oBAAIA,UAAU,WAAd,2CAEF,8BACE,cAAC,EAAD,a,GAVQe,IAAMC,WAiBTO,cAAWN,G,QCVNO,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCXNC,IAASP,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f89104c.chunk.js","sourcesContent":["import React from 'react';\nimport './Icons.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faEnvelope} from '@fortawesome/free-solid-svg-icons';\nimport {\n  faGithub,\n  faLinkedin,\n  faYoutube,\n  faFacebook,\n  faTwitter,\n  faTwitch,\n  faInstagram,\n  faSteam\n} from '@fortawesome/free-brands-svg-icons';\n\nclass Icons extends React.Component {\n  render() {\n    return (\n      <div className='Icons'>\n        <a rel='noopener noreferrer' href='https://www.linkedin.com/in/emrebozkurt26' target='_blank'>\n          <FontAwesomeIcon icon={faLinkedin} size={'3x'} className={'Icon LinkedIn'}/>\n        </a>\n        <a rel='noopener noreferrer' href='https://github.com/noskurt' target='_blank'>\n          <FontAwesomeIcon icon={faGithub} size={'3x'} className={'Icon GitHub'}/>\n        </a>\n        <a rel='noopener noreferrer' href='https://www.instagram.com/noskurt' target='_blank'>\n          <FontAwesomeIcon icon={faInstagram} size={'3x'} className={'Icon Instagram'}/>\n        </a>\n        <a rel='noopener noreferrer' href='https://twitter.com/noskurt' target='_blank'>\n          <FontAwesomeIcon icon={faTwitter} size={'3x'} className={'Icon Twitter'}/>\n        </a>\n        <a rel='noopener noreferrer' href='https://www.facebook.com/noskurt' target='_blank'>\n          <FontAwesomeIcon icon={faFacebook} size={'3x'} className={'Icon Facebook'}/>\n        </a>\n        <a rel='noopener noreferrer' href='https://www.youtube.com/javaca' target='_blank'>\n          <FontAwesomeIcon icon={faYoutube} size={'3x'} className={'Icon Youtube'}/>\n        </a>\n        <a rel='noopener noreferrer' href='https://www.twitch.tv/noskurt' target='_blank'>\n          <FontAwesomeIcon icon={faTwitch} size={'3x'} className={'Icon Twitch'}/>\n        </a>\n        <a rel='noopener noreferrer' href='https://steamcommunity.com/id/noskurt' target='_blank'>\n          <FontAwesomeIcon icon={faSteam} size={'3x'} className={'Icon Steam'}/>\n        </a>\n        <a rel='noopener noreferrer' href='mailto:info@emrebozkurt.de' target='_blank'>\n          <FontAwesomeIcon icon={faEnvelope} size={'3x'} className={'Icon Envelope'}/>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default Icons;\n","import React from 'react';\nimport './App.css';\nimport Icons from './Icons';\nimport {withRouter, RouteComponentProps, Route} from \"react-router-dom\";\n\nclass App extends React.Component<RouteComponentProps> {\n  render() {\n    return (\n      <>\n        <Route exact path=\"/live\" render={() => (window.location.href = \"https://youtu.be/BjaCO1iRV6c\")}/>\n        <div className='App'>\n          <h1 className='FullName'>Emre Bozkurt</h1>\n          <h1 className='JobTitle'>Software Engineer @ Munich</h1>\n        </div>\n        <div>\n          <Icons/>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}